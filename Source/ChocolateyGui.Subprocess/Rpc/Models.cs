// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: models.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ChocolateyGui.Rpc {

  /// <summary>Holder for reflection information generated from models.proto</summary>
  public static partial class ModelsReflection {

    #region Descriptor
    /// <summary>File descriptor for models.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxtb2RlbHMucHJvdG8SEWNob2NvbGF0ZXlndWkucnBjGh9nb29nbGUvcHJv",
            "dG9idWYvVGltZXN0YW1wLnByb3RvIroFCgdQYWNrYWdlEgoKAklkGAEgASgJ",
            "Eg0KBVRpdGxlGAIgASgJEg8KB1ZlcnNpb24YAyABKAkSEwoLRGVzY3JpcHRp",
            "b24YBCABKAkSFAoMUmVsZWFzZU5vdGVzGAUgASgJEg8KB0ljb25VcmwYBiAB",
            "KAkSDwoHQXV0aG9ycxgHIAMoCRIOCgZPd25lcnMYCCADKAkSNAoQUHVibGlz",
            "aGVkRW5jb2RlZBgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "DwoHU3VtbWFyeRgKIAEoCRIMCgRUYWdzGAsgASgJEhUKDURvd25sb2FkQ291",
            "bnQYDCABKAUSHAoUVmVyc2lvbkRvd25sb2FkQ291bnQYDSABKAUSFAoMRGVw",
            "ZW5kZW5jaWVzGA4gASgJEhEKCUNvcHlyaWdodBgPIAEoCRIZChFHYWxsZXJ5",
            "RGV0YWlsc1VybBgQIAEoCRISCgpMaWNlbnNlVXJsGBEgASgJEhIKClByb2pl",
            "Y3RVcmwYEiABKAkSFgoOUmVwb3J0QWJ1c2VVcmwYEyABKAkSEwoLSXNJbnN0",
            "YWxsZWQYFCABKAgSEAoISXNQaW5uZWQYFSABKAgSFwoPSXNMYXRlc3RWZXJz",
            "aW9uGBYgASgIEh8KF0lzQWJzb2x1dGVMYXRlc3RWZXJzaW9uGBcgASgIEhQK",
            "DElzUHJlcmVsZWFzZRgYIAEoCBIQCghMYW5ndWFnZRgZIAEoCRIVCg1MYXRl",
            "c3RWZXJzaW9uGBogASgJEhMKC1BhY2thZ2VIYXNoGBsgASgJEhwKFFBhY2th",
            "Z2VIYXNoQWxnb3JpdGhtGBwgASgJEhMKC1BhY2thZ2VTaXplGB0gASgDEiAK",
            "GFJlcXVpcmVMaWNlbnNlQWNjZXB0YW5jZRgeIAEoCRIOCgZTb3VyY2UYHyAB",
            "KAkiXgoRQ2hvY29sYXRleUZlYXR1cmUSDAoETmFtZRgBIAEoCRIPCgdFbmFi",
            "bGVkGAIgASgIEhUKDVNldEV4cGxpY2l0bHkYAyABKAgSEwoLRGVzY3JpcHRp",
            "b24YBCABKAkiRAoRQ2hvY29sYXRleVNldHRpbmcSCwoDS2V5GAEgASgJEg0K",
            "BVZhbHVlGAIgASgJEhMKC0Rlc2NyaXB0aW9uGAMgASgJIqcBChBDaG9jb2xh",
            "dGV5U291cmNlEgoKAklkGAEgASgJEg0KBVZhbHVlGAIgASgJEhAKCERpc2Fi",
            "bGVkGAMgASgIEhAKCFVzZXJOYW1lGAQgASgJEhAKCFBhc3N3b3JkGAUgASgJ",
            "EhAKCFByaW9yaXR5GAYgASgFEhMKC0NlcnRpZmljYXRlGAcgASgJEhsKE0Nl",
            "cnRpZmljYXRlUGFzc3dvcmQYCCABKAlCFKoCEUNob2NvbGF0ZXlHdWkuUnBj",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.Package), global::ChocolateyGui.Rpc.Package.Parser, new[]{ "Id", "Title", "Version", "Description", "ReleaseNotes", "IconUrl", "Authors", "Owners", "PublishedEncoded", "Summary", "Tags", "DownloadCount", "VersionDownloadCount", "Dependencies", "Copyright", "GalleryDetailsUrl", "LicenseUrl", "ProjectUrl", "ReportAbuseUrl", "IsInstalled", "IsPinned", "IsLatestVersion", "IsAbsoluteLatestVersion", "IsPrerelease", "Language", "LatestVersion", "PackageHash", "PackageHashAlgorithm", "PackageSize", "RequireLicenseAcceptance", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.ChocolateyFeature), global::ChocolateyGui.Rpc.ChocolateyFeature.Parser, new[]{ "Name", "Enabled", "SetExplicitly", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.ChocolateySetting), global::ChocolateyGui.Rpc.ChocolateySetting.Parser, new[]{ "Key", "Value", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.ChocolateySource), global::ChocolateyGui.Rpc.ChocolateySource.Parser, new[]{ "Id", "Value", "Disabled", "UserName", "Password", "Priority", "Certificate", "CertificatePassword" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Package : pb::IMessage<Package> {
    private static readonly pb::MessageParser<Package> _parser = new pb::MessageParser<Package>(() => new Package());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Package> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.ModelsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package(Package other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      version_ = other.version_;
      description_ = other.description_;
      releaseNotes_ = other.releaseNotes_;
      iconUrl_ = other.iconUrl_;
      authors_ = other.authors_.Clone();
      owners_ = other.owners_.Clone();
      PublishedEncoded = other.publishedEncoded_ != null ? other.PublishedEncoded.Clone() : null;
      summary_ = other.summary_;
      tags_ = other.tags_;
      downloadCount_ = other.downloadCount_;
      versionDownloadCount_ = other.versionDownloadCount_;
      dependencies_ = other.dependencies_;
      copyright_ = other.copyright_;
      galleryDetailsUrl_ = other.galleryDetailsUrl_;
      licenseUrl_ = other.licenseUrl_;
      projectUrl_ = other.projectUrl_;
      reportAbuseUrl_ = other.reportAbuseUrl_;
      isInstalled_ = other.isInstalled_;
      isPinned_ = other.isPinned_;
      isLatestVersion_ = other.isLatestVersion_;
      isAbsoluteLatestVersion_ = other.isAbsoluteLatestVersion_;
      isPrerelease_ = other.isPrerelease_;
      language_ = other.language_;
      latestVersion_ = other.latestVersion_;
      packageHash_ = other.packageHash_;
      packageHashAlgorithm_ = other.packageHashAlgorithm_;
      packageSize_ = other.packageSize_;
      requireLicenseAcceptance_ = other.requireLicenseAcceptance_;
      source_ = other.source_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package Clone() {
      return new Package(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReleaseNotes" field.</summary>
    public const int ReleaseNotesFieldNumber = 5;
    private string releaseNotes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReleaseNotes {
      get { return releaseNotes_; }
      set {
        releaseNotes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IconUrl" field.</summary>
    public const int IconUrlFieldNumber = 6;
    private string iconUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconUrl {
      get { return iconUrl_; }
      set {
        iconUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Authors" field.</summary>
    public const int AuthorsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_authors_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> authors_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Authors {
      get { return authors_; }
    }

    /// <summary>Field number for the "Owners" field.</summary>
    public const int OwnersFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_owners_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> owners_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Owners {
      get { return owners_; }
    }

    /// <summary>Field number for the "PublishedEncoded" field.</summary>
    public const int PublishedEncodedFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp publishedEncoded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PublishedEncoded {
      get { return publishedEncoded_; }
      set {
        publishedEncoded_ = value;
      }
    }

    /// <summary>Field number for the "Summary" field.</summary>
    public const int SummaryFieldNumber = 10;
    private string summary_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Summary {
      get { return summary_; }
      set {
        summary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tags" field.</summary>
    public const int TagsFieldNumber = 11;
    private string tags_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tags {
      get { return tags_; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DownloadCount" field.</summary>
    public const int DownloadCountFieldNumber = 12;
    private int downloadCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DownloadCount {
      get { return downloadCount_; }
      set {
        downloadCount_ = value;
      }
    }

    /// <summary>Field number for the "VersionDownloadCount" field.</summary>
    public const int VersionDownloadCountFieldNumber = 13;
    private int versionDownloadCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionDownloadCount {
      get { return versionDownloadCount_; }
      set {
        versionDownloadCount_ = value;
      }
    }

    /// <summary>Field number for the "Dependencies" field.</summary>
    public const int DependenciesFieldNumber = 14;
    private string dependencies_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dependencies {
      get { return dependencies_; }
      set {
        dependencies_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Copyright" field.</summary>
    public const int CopyrightFieldNumber = 15;
    private string copyright_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Copyright {
      get { return copyright_; }
      set {
        copyright_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GalleryDetailsUrl" field.</summary>
    public const int GalleryDetailsUrlFieldNumber = 16;
    private string galleryDetailsUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GalleryDetailsUrl {
      get { return galleryDetailsUrl_; }
      set {
        galleryDetailsUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LicenseUrl" field.</summary>
    public const int LicenseUrlFieldNumber = 17;
    private string licenseUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LicenseUrl {
      get { return licenseUrl_; }
      set {
        licenseUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProjectUrl" field.</summary>
    public const int ProjectUrlFieldNumber = 18;
    private string projectUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectUrl {
      get { return projectUrl_; }
      set {
        projectUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReportAbuseUrl" field.</summary>
    public const int ReportAbuseUrlFieldNumber = 19;
    private string reportAbuseUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReportAbuseUrl {
      get { return reportAbuseUrl_; }
      set {
        reportAbuseUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsInstalled" field.</summary>
    public const int IsInstalledFieldNumber = 20;
    private bool isInstalled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInstalled {
      get { return isInstalled_; }
      set {
        isInstalled_ = value;
      }
    }

    /// <summary>Field number for the "IsPinned" field.</summary>
    public const int IsPinnedFieldNumber = 21;
    private bool isPinned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPinned {
      get { return isPinned_; }
      set {
        isPinned_ = value;
      }
    }

    /// <summary>Field number for the "IsLatestVersion" field.</summary>
    public const int IsLatestVersionFieldNumber = 22;
    private bool isLatestVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLatestVersion {
      get { return isLatestVersion_; }
      set {
        isLatestVersion_ = value;
      }
    }

    /// <summary>Field number for the "IsAbsoluteLatestVersion" field.</summary>
    public const int IsAbsoluteLatestVersionFieldNumber = 23;
    private bool isAbsoluteLatestVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAbsoluteLatestVersion {
      get { return isAbsoluteLatestVersion_; }
      set {
        isAbsoluteLatestVersion_ = value;
      }
    }

    /// <summary>Field number for the "IsPrerelease" field.</summary>
    public const int IsPrereleaseFieldNumber = 24;
    private bool isPrerelease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrerelease {
      get { return isPrerelease_; }
      set {
        isPrerelease_ = value;
      }
    }

    /// <summary>Field number for the "Language" field.</summary>
    public const int LanguageFieldNumber = 25;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LatestVersion" field.</summary>
    public const int LatestVersionFieldNumber = 26;
    private string latestVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LatestVersion {
      get { return latestVersion_; }
      set {
        latestVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PackageHash" field.</summary>
    public const int PackageHashFieldNumber = 27;
    private string packageHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageHash {
      get { return packageHash_; }
      set {
        packageHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PackageHashAlgorithm" field.</summary>
    public const int PackageHashAlgorithmFieldNumber = 28;
    private string packageHashAlgorithm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageHashAlgorithm {
      get { return packageHashAlgorithm_; }
      set {
        packageHashAlgorithm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PackageSize" field.</summary>
    public const int PackageSizeFieldNumber = 29;
    private long packageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PackageSize {
      get { return packageSize_; }
      set {
        packageSize_ = value;
      }
    }

    /// <summary>Field number for the "RequireLicenseAcceptance" field.</summary>
    public const int RequireLicenseAcceptanceFieldNumber = 30;
    private string requireLicenseAcceptance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequireLicenseAcceptance {
      get { return requireLicenseAcceptance_; }
      set {
        requireLicenseAcceptance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Source" field.</summary>
    public const int SourceFieldNumber = 31;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Package);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Package other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (Version != other.Version) return false;
      if (Description != other.Description) return false;
      if (ReleaseNotes != other.ReleaseNotes) return false;
      if (IconUrl != other.IconUrl) return false;
      if(!authors_.Equals(other.authors_)) return false;
      if(!owners_.Equals(other.owners_)) return false;
      if (!object.Equals(PublishedEncoded, other.PublishedEncoded)) return false;
      if (Summary != other.Summary) return false;
      if (Tags != other.Tags) return false;
      if (DownloadCount != other.DownloadCount) return false;
      if (VersionDownloadCount != other.VersionDownloadCount) return false;
      if (Dependencies != other.Dependencies) return false;
      if (Copyright != other.Copyright) return false;
      if (GalleryDetailsUrl != other.GalleryDetailsUrl) return false;
      if (LicenseUrl != other.LicenseUrl) return false;
      if (ProjectUrl != other.ProjectUrl) return false;
      if (ReportAbuseUrl != other.ReportAbuseUrl) return false;
      if (IsInstalled != other.IsInstalled) return false;
      if (IsPinned != other.IsPinned) return false;
      if (IsLatestVersion != other.IsLatestVersion) return false;
      if (IsAbsoluteLatestVersion != other.IsAbsoluteLatestVersion) return false;
      if (IsPrerelease != other.IsPrerelease) return false;
      if (Language != other.Language) return false;
      if (LatestVersion != other.LatestVersion) return false;
      if (PackageHash != other.PackageHash) return false;
      if (PackageHashAlgorithm != other.PackageHashAlgorithm) return false;
      if (PackageSize != other.PackageSize) return false;
      if (RequireLicenseAcceptance != other.RequireLicenseAcceptance) return false;
      if (Source != other.Source) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ReleaseNotes.Length != 0) hash ^= ReleaseNotes.GetHashCode();
      if (IconUrl.Length != 0) hash ^= IconUrl.GetHashCode();
      hash ^= authors_.GetHashCode();
      hash ^= owners_.GetHashCode();
      if (publishedEncoded_ != null) hash ^= PublishedEncoded.GetHashCode();
      if (Summary.Length != 0) hash ^= Summary.GetHashCode();
      if (Tags.Length != 0) hash ^= Tags.GetHashCode();
      if (DownloadCount != 0) hash ^= DownloadCount.GetHashCode();
      if (VersionDownloadCount != 0) hash ^= VersionDownloadCount.GetHashCode();
      if (Dependencies.Length != 0) hash ^= Dependencies.GetHashCode();
      if (Copyright.Length != 0) hash ^= Copyright.GetHashCode();
      if (GalleryDetailsUrl.Length != 0) hash ^= GalleryDetailsUrl.GetHashCode();
      if (LicenseUrl.Length != 0) hash ^= LicenseUrl.GetHashCode();
      if (ProjectUrl.Length != 0) hash ^= ProjectUrl.GetHashCode();
      if (ReportAbuseUrl.Length != 0) hash ^= ReportAbuseUrl.GetHashCode();
      if (IsInstalled != false) hash ^= IsInstalled.GetHashCode();
      if (IsPinned != false) hash ^= IsPinned.GetHashCode();
      if (IsLatestVersion != false) hash ^= IsLatestVersion.GetHashCode();
      if (IsAbsoluteLatestVersion != false) hash ^= IsAbsoluteLatestVersion.GetHashCode();
      if (IsPrerelease != false) hash ^= IsPrerelease.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (LatestVersion.Length != 0) hash ^= LatestVersion.GetHashCode();
      if (PackageHash.Length != 0) hash ^= PackageHash.GetHashCode();
      if (PackageHashAlgorithm.Length != 0) hash ^= PackageHashAlgorithm.GetHashCode();
      if (PackageSize != 0L) hash ^= PackageSize.GetHashCode();
      if (RequireLicenseAcceptance.Length != 0) hash ^= RequireLicenseAcceptance.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (ReleaseNotes.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReleaseNotes);
      }
      if (IconUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IconUrl);
      }
      authors_.WriteTo(output, _repeated_authors_codec);
      owners_.WriteTo(output, _repeated_owners_codec);
      if (publishedEncoded_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(PublishedEncoded);
      }
      if (Summary.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Summary);
      }
      if (Tags.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Tags);
      }
      if (DownloadCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DownloadCount);
      }
      if (VersionDownloadCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(VersionDownloadCount);
      }
      if (Dependencies.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Dependencies);
      }
      if (Copyright.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Copyright);
      }
      if (GalleryDetailsUrl.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(GalleryDetailsUrl);
      }
      if (LicenseUrl.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(LicenseUrl);
      }
      if (ProjectUrl.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ProjectUrl);
      }
      if (ReportAbuseUrl.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ReportAbuseUrl);
      }
      if (IsInstalled != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsInstalled);
      }
      if (IsPinned != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsPinned);
      }
      if (IsLatestVersion != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsLatestVersion);
      }
      if (IsAbsoluteLatestVersion != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsAbsoluteLatestVersion);
      }
      if (IsPrerelease != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsPrerelease);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Language);
      }
      if (LatestVersion.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(LatestVersion);
      }
      if (PackageHash.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(PackageHash);
      }
      if (PackageHashAlgorithm.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(PackageHashAlgorithm);
      }
      if (PackageSize != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(PackageSize);
      }
      if (RequireLicenseAcceptance.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(RequireLicenseAcceptance);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ReleaseNotes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReleaseNotes);
      }
      if (IconUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconUrl);
      }
      size += authors_.CalculateSize(_repeated_authors_codec);
      size += owners_.CalculateSize(_repeated_owners_codec);
      if (publishedEncoded_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublishedEncoded);
      }
      if (Summary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Summary);
      }
      if (Tags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tags);
      }
      if (DownloadCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DownloadCount);
      }
      if (VersionDownloadCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionDownloadCount);
      }
      if (Dependencies.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dependencies);
      }
      if (Copyright.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Copyright);
      }
      if (GalleryDetailsUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GalleryDetailsUrl);
      }
      if (LicenseUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LicenseUrl);
      }
      if (ProjectUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProjectUrl);
      }
      if (ReportAbuseUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReportAbuseUrl);
      }
      if (IsInstalled != false) {
        size += 2 + 1;
      }
      if (IsPinned != false) {
        size += 2 + 1;
      }
      if (IsLatestVersion != false) {
        size += 2 + 1;
      }
      if (IsAbsoluteLatestVersion != false) {
        size += 2 + 1;
      }
      if (IsPrerelease != false) {
        size += 2 + 1;
      }
      if (Language.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (LatestVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LatestVersion);
      }
      if (PackageHash.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PackageHash);
      }
      if (PackageHashAlgorithm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PackageHashAlgorithm);
      }
      if (PackageSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PackageSize);
      }
      if (RequireLicenseAcceptance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RequireLicenseAcceptance);
      }
      if (Source.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Package other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ReleaseNotes.Length != 0) {
        ReleaseNotes = other.ReleaseNotes;
      }
      if (other.IconUrl.Length != 0) {
        IconUrl = other.IconUrl;
      }
      authors_.Add(other.authors_);
      owners_.Add(other.owners_);
      if (other.publishedEncoded_ != null) {
        if (publishedEncoded_ == null) {
          publishedEncoded_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PublishedEncoded.MergeFrom(other.PublishedEncoded);
      }
      if (other.Summary.Length != 0) {
        Summary = other.Summary;
      }
      if (other.Tags.Length != 0) {
        Tags = other.Tags;
      }
      if (other.DownloadCount != 0) {
        DownloadCount = other.DownloadCount;
      }
      if (other.VersionDownloadCount != 0) {
        VersionDownloadCount = other.VersionDownloadCount;
      }
      if (other.Dependencies.Length != 0) {
        Dependencies = other.Dependencies;
      }
      if (other.Copyright.Length != 0) {
        Copyright = other.Copyright;
      }
      if (other.GalleryDetailsUrl.Length != 0) {
        GalleryDetailsUrl = other.GalleryDetailsUrl;
      }
      if (other.LicenseUrl.Length != 0) {
        LicenseUrl = other.LicenseUrl;
      }
      if (other.ProjectUrl.Length != 0) {
        ProjectUrl = other.ProjectUrl;
      }
      if (other.ReportAbuseUrl.Length != 0) {
        ReportAbuseUrl = other.ReportAbuseUrl;
      }
      if (other.IsInstalled != false) {
        IsInstalled = other.IsInstalled;
      }
      if (other.IsPinned != false) {
        IsPinned = other.IsPinned;
      }
      if (other.IsLatestVersion != false) {
        IsLatestVersion = other.IsLatestVersion;
      }
      if (other.IsAbsoluteLatestVersion != false) {
        IsAbsoluteLatestVersion = other.IsAbsoluteLatestVersion;
      }
      if (other.IsPrerelease != false) {
        IsPrerelease = other.IsPrerelease;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.LatestVersion.Length != 0) {
        LatestVersion = other.LatestVersion;
      }
      if (other.PackageHash.Length != 0) {
        PackageHash = other.PackageHash;
      }
      if (other.PackageHashAlgorithm.Length != 0) {
        PackageHashAlgorithm = other.PackageHashAlgorithm;
      }
      if (other.PackageSize != 0L) {
        PackageSize = other.PackageSize;
      }
      if (other.RequireLicenseAcceptance.Length != 0) {
        RequireLicenseAcceptance = other.RequireLicenseAcceptance;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            ReleaseNotes = input.ReadString();
            break;
          }
          case 50: {
            IconUrl = input.ReadString();
            break;
          }
          case 58: {
            authors_.AddEntriesFrom(input, _repeated_authors_codec);
            break;
          }
          case 66: {
            owners_.AddEntriesFrom(input, _repeated_owners_codec);
            break;
          }
          case 74: {
            if (publishedEncoded_ == null) {
              publishedEncoded_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(publishedEncoded_);
            break;
          }
          case 82: {
            Summary = input.ReadString();
            break;
          }
          case 90: {
            Tags = input.ReadString();
            break;
          }
          case 96: {
            DownloadCount = input.ReadInt32();
            break;
          }
          case 104: {
            VersionDownloadCount = input.ReadInt32();
            break;
          }
          case 114: {
            Dependencies = input.ReadString();
            break;
          }
          case 122: {
            Copyright = input.ReadString();
            break;
          }
          case 130: {
            GalleryDetailsUrl = input.ReadString();
            break;
          }
          case 138: {
            LicenseUrl = input.ReadString();
            break;
          }
          case 146: {
            ProjectUrl = input.ReadString();
            break;
          }
          case 154: {
            ReportAbuseUrl = input.ReadString();
            break;
          }
          case 160: {
            IsInstalled = input.ReadBool();
            break;
          }
          case 168: {
            IsPinned = input.ReadBool();
            break;
          }
          case 176: {
            IsLatestVersion = input.ReadBool();
            break;
          }
          case 184: {
            IsAbsoluteLatestVersion = input.ReadBool();
            break;
          }
          case 192: {
            IsPrerelease = input.ReadBool();
            break;
          }
          case 202: {
            Language = input.ReadString();
            break;
          }
          case 210: {
            LatestVersion = input.ReadString();
            break;
          }
          case 218: {
            PackageHash = input.ReadString();
            break;
          }
          case 226: {
            PackageHashAlgorithm = input.ReadString();
            break;
          }
          case 232: {
            PackageSize = input.ReadInt64();
            break;
          }
          case 242: {
            RequireLicenseAcceptance = input.ReadString();
            break;
          }
          case 250: {
            Source = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChocolateyFeature : pb::IMessage<ChocolateyFeature> {
    private static readonly pb::MessageParser<ChocolateyFeature> _parser = new pb::MessageParser<ChocolateyFeature>(() => new ChocolateyFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChocolateyFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.ModelsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChocolateyFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChocolateyFeature(ChocolateyFeature other) : this() {
      name_ = other.name_;
      enabled_ = other.enabled_;
      setExplicitly_ = other.setExplicitly_;
      description_ = other.description_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChocolateyFeature Clone() {
      return new ChocolateyFeature(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "SetExplicitly" field.</summary>
    public const int SetExplicitlyFieldNumber = 3;
    private bool setExplicitly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SetExplicitly {
      get { return setExplicitly_; }
      set {
        setExplicitly_ = value;
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChocolateyFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChocolateyFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Enabled != other.Enabled) return false;
      if (SetExplicitly != other.SetExplicitly) return false;
      if (Description != other.Description) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (SetExplicitly != false) hash ^= SetExplicitly.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (SetExplicitly != false) {
        output.WriteRawTag(24);
        output.WriteBool(SetExplicitly);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (SetExplicitly != false) {
        size += 1 + 1;
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChocolateyFeature other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.SetExplicitly != false) {
        SetExplicitly = other.SetExplicitly;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
          case 24: {
            SetExplicitly = input.ReadBool();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChocolateySetting : pb::IMessage<ChocolateySetting> {
    private static readonly pb::MessageParser<ChocolateySetting> _parser = new pb::MessageParser<ChocolateySetting>(() => new ChocolateySetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChocolateySetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.ModelsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChocolateySetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChocolateySetting(ChocolateySetting other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      description_ = other.description_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChocolateySetting Clone() {
      return new ChocolateySetting(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChocolateySetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChocolateySetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (Description != other.Description) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChocolateySetting other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChocolateySource : pb::IMessage<ChocolateySource> {
    private static readonly pb::MessageParser<ChocolateySource> _parser = new pb::MessageParser<ChocolateySource>(() => new ChocolateySource());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChocolateySource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.ModelsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChocolateySource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChocolateySource(ChocolateySource other) : this() {
      id_ = other.id_;
      value_ = other.value_;
      disabled_ = other.disabled_;
      userName_ = other.userName_;
      password_ = other.password_;
      priority_ = other.priority_;
      certificate_ = other.certificate_;
      certificatePassword_ = other.certificatePassword_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChocolateySource Clone() {
      return new ChocolateySource(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Disabled" field.</summary>
    public const int DisabledFieldNumber = 3;
    private bool disabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Disabled {
      get { return disabled_; }
      set {
        disabled_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 4;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 5;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Priority" field.</summary>
    public const int PriorityFieldNumber = 6;
    private int priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "Certificate" field.</summary>
    public const int CertificateFieldNumber = 7;
    private string certificate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Certificate {
      get { return certificate_; }
      set {
        certificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CertificatePassword" field.</summary>
    public const int CertificatePasswordFieldNumber = 8;
    private string certificatePassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertificatePassword {
      get { return certificatePassword_; }
      set {
        certificatePassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChocolateySource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChocolateySource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Value != other.Value) return false;
      if (Disabled != other.Disabled) return false;
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      if (Priority != other.Priority) return false;
      if (Certificate != other.Certificate) return false;
      if (CertificatePassword != other.CertificatePassword) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Disabled != false) hash ^= Disabled.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (Certificate.Length != 0) hash ^= Certificate.GetHashCode();
      if (CertificatePassword.Length != 0) hash ^= CertificatePassword.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (Disabled != false) {
        output.WriteRawTag(24);
        output.WriteBool(Disabled);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Password);
      }
      if (Priority != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Priority);
      }
      if (Certificate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Certificate);
      }
      if (CertificatePassword.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CertificatePassword);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Disabled != false) {
        size += 1 + 1;
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (Certificate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Certificate);
      }
      if (CertificatePassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificatePassword);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChocolateySource other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Disabled != false) {
        Disabled = other.Disabled;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.Certificate.Length != 0) {
        Certificate = other.Certificate;
      }
      if (other.CertificatePassword.Length != 0) {
        CertificatePassword = other.CertificatePassword;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 24: {
            Disabled = input.ReadBool();
            break;
          }
          case 34: {
            UserName = input.ReadString();
            break;
          }
          case 42: {
            Password = input.ReadString();
            break;
          }
          case 48: {
            Priority = input.ReadInt32();
            break;
          }
          case 58: {
            Certificate = input.ReadString();
            break;
          }
          case 66: {
            CertificatePassword = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
