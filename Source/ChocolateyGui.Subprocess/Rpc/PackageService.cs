// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: package_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ChocolateyGui.Rpc {

  /// <summary>Holder for reflection information generated from package_service.proto</summary>
  public static partial class PackageServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for package_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PackageServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVwYWNrYWdlX3NlcnZpY2UucHJvdG8SEWNob2NvbGF0ZXlndWkucnBjGgxt",
            "b2RlbHMucHJvdG8iBwoFRW1wdHkiJgoQSXNFbGV2YXRlZFJlc3VsdBISCgpJ",
            "c0VsZXZhdGVkGAEgASgIIikKDE91dGRhdGVkQXJncxIZChFJbmNsdWRlUHJl",
            "cmVsZWFzZRgBIAEoCCItCg5PdXRkYXRlZFJlc3VsdBIKCgJJZBgBIAEoCRIP",
            "CgdWZXJzaW9uGAIgASgJIjwKDFBhY2thZ2VzTGlzdBIsCghQYWNrYWdlcxgB",
            "IAMoCzIaLmNob2NvbGF0ZXlndWkucnBjLlBhY2thZ2UiywEKEVBhY2thZ2VT",
            "ZWFyY2hBcmdzEg0KBVF1ZXJ5GAEgASgJEhMKC0N1cnJlbnRQYWdlGAIgASgF",
            "EhAKCFBhZ2VTaXplGAMgASgFEg4KBlNvdXJjZRgEIAEoCRIaChJJbmNsdWRl",
            "QWxsVmVyc2lvbnMYBSABKAgSGQoRSW5jbHVkZVByZXJlbGVhc2UYBiABKAgS",
            "EgoKTWF0Y2hRdWVyeRgHIAEoCBISCgpTb3J0Q29sdW1uGAggASgJEhEKCVRh",
            "Z3NRdWVyeRgJIAMoCSJWChJQYWNrYWdlU2VhcmNoUmVwbHkSLAoIUGFja2Fn",
            "ZXMYASADKAsyGi5jaG9jb2xhdGV5Z3VpLnJwYy5QYWNrYWdlEhIKClRvdGFs",
            "Q291bnQYAiABKAUiQwoOR2V0UGFja2FnZUFyZ3MSCgoCSWQYASABKAkSDwoH",
            "VmVyc2lvbhgCIAEoCRIUCgxJc1ByZXJlbGVhc2UYAyABKAgiWAoWUGFja2Fn",
            "ZU9wZXJhdGlvblJlc3VsdBISCgpTdWNjZXNzZnVsGAEgASgIEhAKCE1lc3Nh",
            "Z2VzGAIgAygJEhgKEEV4Y2VwdGlvbk1lc3NhZ2UYAyABKAkiUAoSSW5zdGFs",
            "bFBhY2thZ2VBcmdzEgoKAklkGAEgASgJEg8KB1ZlcnNpb24YAiABKAkSDgoG",
            "U291cmNlGAMgASgJEg0KBUZvcmNlGAQgASgIIkIKFFVuaW5zdGFsbFBhY2th",
            "Z2VBcmdzEgoKAklkGAEgASgJEg8KB1ZlcnNpb24YAiABKAkSDQoFRm9yY2UY",
            "AyABKAgiLwoRVXBkYXRlUGFja2FnZUFyZ3MSCgoCSWQYASABKAkSDgoGU291",
            "cmNlGAIgASgJIi0KDlBpblBhY2thZ2VBcmdzEgoKAklkGAEgASgJEg8KB1Zl",
            "cnNpb24YAiABKAkiUwoQVXBkYXRlU291cmNlQXJncxIKCgJJZBgBIAEoCRIz",
            "CgZTb3VyY2UYAiABKAsyIy5jaG9jb2xhdGV5Z3VpLnJwYy5DaG9jb2xhdGV5",
            "U291cmNlIh4KEFJlbW92ZVNvdXJjZUFyZ3MSCgoCSWQYASABKAkyig0KDlBh",
            "Y2thZ2VTZXJ2aWNlEk0KCklzRWxldmF0ZWQSGC5jaG9jb2xhdGV5Z3VpLnJw",
            "Yy5FbXB0eRojLmNob2NvbGF0ZXlndWkucnBjLklzRWxldmF0ZWRSZXN1bHQi",
            "ABJTChRHZXRJbnN0YWxsZWRQYWNrYWdlcxIYLmNob2NvbGF0ZXlndWkucnBj",
            "LkVtcHR5Gh8uY2hvY29sYXRleWd1aS5ycGMuUGFja2FnZXNMaXN0IgASXQoT",
            "R2V0T3V0ZGF0ZWRQYWNrYWdlcxIfLmNob2NvbGF0ZXlndWkucnBjLk91dGRh",
            "dGVkQXJncxohLmNob2NvbGF0ZXlndWkucnBjLk91dGRhdGVkUmVzdWx0IgAw",
            "ARJXCgZTZWFyY2gSJC5jaG9jb2xhdGV5Z3VpLnJwYy5QYWNrYWdlU2VhcmNo",
            "QXJncxolLmNob2NvbGF0ZXlndWkucnBjLlBhY2thZ2VTZWFyY2hSZXBseSIA",
            "ElQKEUdldEJ5VmVyc2lvbkFuZElkEiEuY2hvY29sYXRleWd1aS5ycGMuR2V0",
            "UGFja2FnZUFyZ3MaGi5jaG9jb2xhdGV5Z3VpLnJwYy5QYWNrYWdlIgASZAoO",
            "SW5zdGFsbFBhY2thZ2USJS5jaG9jb2xhdGV5Z3VpLnJwYy5JbnN0YWxsUGFj",
            "a2FnZUFyZ3MaKS5jaG9jb2xhdGV5Z3VpLnJwYy5QYWNrYWdlT3BlcmF0aW9u",
            "UmVzdWx0IgASaAoQVW5pbnN0YWxsUGFja2FnZRInLmNob2NvbGF0ZXlndWku",
            "cnBjLlVuaW5zdGFsbFBhY2thZ2VBcmdzGikuY2hvY29sYXRleWd1aS5ycGMu",
            "UGFja2FnZU9wZXJhdGlvblJlc3VsdCIAEmIKDVVwZGF0ZVBhY2thZ2USJC5j",
            "aG9jb2xhdGV5Z3VpLnJwYy5VcGRhdGVQYWNrYWdlQXJncxopLmNob2NvbGF0",
            "ZXlndWkucnBjLlBhY2thZ2VPcGVyYXRpb25SZXN1bHQiABJcCgpQaW5QYWNr",
            "YWdlEiEuY2hvY29sYXRleWd1aS5ycGMuUGluUGFja2FnZUFyZ3MaKS5jaG9j",
            "b2xhdGV5Z3VpLnJwYy5QYWNrYWdlT3BlcmF0aW9uUmVzdWx0IgASXgoMVW5w",
            "aW5QYWNrYWdlEiEuY2hvY29sYXRleWd1aS5ycGMuUGluUGFja2FnZUFyZ3Ma",
            "KS5jaG9jb2xhdGV5Z3VpLnJwYy5QYWNrYWdlT3BlcmF0aW9uUmVzdWx0IgAS",
            "UQoLR2V0RmVhdHVyZXMSGC5jaG9jb2xhdGV5Z3VpLnJwYy5FbXB0eRokLmNo",
            "b2NvbGF0ZXlndWkucnBjLkNob2NvbGF0ZXlGZWF0dXJlIgAwARJOCgpTZXRG",
            "ZWF0dXJlEiQuY2hvY29sYXRleWd1aS5ycGMuQ2hvY29sYXRleUZlYXR1cmUa",
            "GC5jaG9jb2xhdGV5Z3VpLnJwYy5FbXB0eSIAElEKC0dldFNldHRpbmdzEhgu",
            "Y2hvY29sYXRleWd1aS5ycGMuRW1wdHkaJC5jaG9jb2xhdGV5Z3VpLnJwYy5D",
            "aG9jb2xhdGV5U2V0dGluZyIAMAESTgoKU2V0U2V0dGluZxIkLmNob2NvbGF0",
            "ZXlndWkucnBjLkNob2NvbGF0ZXlTZXR0aW5nGhguY2hvY29sYXRleWd1aS5y",
            "cGMuRW1wdHkiABJPCgpHZXRTb3VyY2VzEhguY2hvY29sYXRleWd1aS5ycGMu",
            "RW1wdHkaIy5jaG9jb2xhdGV5Z3VpLnJwYy5DaG9jb2xhdGV5U291cmNlIgAw",
            "ARJMCglBZGRTb3VyY2USIy5jaG9jb2xhdGV5Z3VpLnJwYy5DaG9jb2xhdGV5",
            "U291cmNlGhguY2hvY29sYXRleWd1aS5ycGMuRW1wdHkiABJPCgxVcGRhdGVT",
            "b3VyY2USIy5jaG9jb2xhdGV5Z3VpLnJwYy5VcGRhdGVTb3VyY2VBcmdzGhgu",
            "Y2hvY29sYXRleWd1aS5ycGMuRW1wdHkiABJgCgxSZW1vdmVTb3VyY2USIy5j",
            "aG9jb2xhdGV5Z3VpLnJwYy5SZW1vdmVTb3VyY2VBcmdzGikuY2hvY29sYXRl",
            "eWd1aS5ycGMuUGFja2FnZU9wZXJhdGlvblJlc3VsdCIAEjwKBEV4aXQSGC5j",
            "aG9jb2xhdGV5Z3VpLnJwYy5FbXB0eRoYLmNob2NvbGF0ZXlndWkucnBjLkVt",
            "cHR5IgBCFKoCEUNob2NvbGF0ZXlHdWkuUnBjYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ChocolateyGui.Rpc.ModelsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.Empty), global::ChocolateyGui.Rpc.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.IsElevatedResult), global::ChocolateyGui.Rpc.IsElevatedResult.Parser, new[]{ "IsElevated" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.OutdatedArgs), global::ChocolateyGui.Rpc.OutdatedArgs.Parser, new[]{ "IncludePrerelease" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.OutdatedResult), global::ChocolateyGui.Rpc.OutdatedResult.Parser, new[]{ "Id", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.PackagesList), global::ChocolateyGui.Rpc.PackagesList.Parser, new[]{ "Packages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.PackageSearchArgs), global::ChocolateyGui.Rpc.PackageSearchArgs.Parser, new[]{ "Query", "CurrentPage", "PageSize", "Source", "IncludeAllVersions", "IncludePrerelease", "MatchQuery", "SortColumn", "TagsQuery" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.PackageSearchReply), global::ChocolateyGui.Rpc.PackageSearchReply.Parser, new[]{ "Packages", "TotalCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.GetPackageArgs), global::ChocolateyGui.Rpc.GetPackageArgs.Parser, new[]{ "Id", "Version", "IsPrerelease" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.PackageOperationResult), global::ChocolateyGui.Rpc.PackageOperationResult.Parser, new[]{ "Successful", "Messages", "ExceptionMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.InstallPackageArgs), global::ChocolateyGui.Rpc.InstallPackageArgs.Parser, new[]{ "Id", "Version", "Source", "Force" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.UninstallPackageArgs), global::ChocolateyGui.Rpc.UninstallPackageArgs.Parser, new[]{ "Id", "Version", "Force" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.UpdatePackageArgs), global::ChocolateyGui.Rpc.UpdatePackageArgs.Parser, new[]{ "Id", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.PinPackageArgs), global::ChocolateyGui.Rpc.PinPackageArgs.Parser, new[]{ "Id", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.UpdateSourceArgs), global::ChocolateyGui.Rpc.UpdateSourceArgs.Parser, new[]{ "Id", "Source" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChocolateyGui.Rpc.RemoveSourceArgs), global::ChocolateyGui.Rpc.RemoveSourceArgs.Parser, new[]{ "Id" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class IsElevatedResult : pb::IMessage<IsElevatedResult> {
    private static readonly pb::MessageParser<IsElevatedResult> _parser = new pb::MessageParser<IsElevatedResult>(() => new IsElevatedResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsElevatedResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsElevatedResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsElevatedResult(IsElevatedResult other) : this() {
      isElevated_ = other.isElevated_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsElevatedResult Clone() {
      return new IsElevatedResult(this);
    }

    /// <summary>Field number for the "IsElevated" field.</summary>
    public const int IsElevatedFieldNumber = 1;
    private bool isElevated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsElevated {
      get { return isElevated_; }
      set {
        isElevated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsElevatedResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsElevatedResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsElevated != other.IsElevated) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsElevated != false) hash ^= IsElevated.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsElevated != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsElevated);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsElevated != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsElevatedResult other) {
      if (other == null) {
        return;
      }
      if (other.IsElevated != false) {
        IsElevated = other.IsElevated;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsElevated = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutdatedArgs : pb::IMessage<OutdatedArgs> {
    private static readonly pb::MessageParser<OutdatedArgs> _parser = new pb::MessageParser<OutdatedArgs>(() => new OutdatedArgs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutdatedArgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutdatedArgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutdatedArgs(OutdatedArgs other) : this() {
      includePrerelease_ = other.includePrerelease_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutdatedArgs Clone() {
      return new OutdatedArgs(this);
    }

    /// <summary>Field number for the "IncludePrerelease" field.</summary>
    public const int IncludePrereleaseFieldNumber = 1;
    private bool includePrerelease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludePrerelease {
      get { return includePrerelease_; }
      set {
        includePrerelease_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutdatedArgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutdatedArgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncludePrerelease != other.IncludePrerelease) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncludePrerelease != false) hash ^= IncludePrerelease.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncludePrerelease != false) {
        output.WriteRawTag(8);
        output.WriteBool(IncludePrerelease);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncludePrerelease != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutdatedArgs other) {
      if (other == null) {
        return;
      }
      if (other.IncludePrerelease != false) {
        IncludePrerelease = other.IncludePrerelease;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IncludePrerelease = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutdatedResult : pb::IMessage<OutdatedResult> {
    private static readonly pb::MessageParser<OutdatedResult> _parser = new pb::MessageParser<OutdatedResult>(() => new OutdatedResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutdatedResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutdatedResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutdatedResult(OutdatedResult other) : this() {
      id_ = other.id_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutdatedResult Clone() {
      return new OutdatedResult(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutdatedResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutdatedResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutdatedResult other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PackagesList : pb::IMessage<PackagesList> {
    private static readonly pb::MessageParser<PackagesList> _parser = new pb::MessageParser<PackagesList>(() => new PackagesList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackagesList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackagesList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackagesList(PackagesList other) : this() {
      packages_ = other.packages_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackagesList Clone() {
      return new PackagesList(this);
    }

    /// <summary>Field number for the "Packages" field.</summary>
    public const int PackagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ChocolateyGui.Rpc.Package> _repeated_packages_codec
        = pb::FieldCodec.ForMessage(10, global::ChocolateyGui.Rpc.Package.Parser);
    private readonly pbc::RepeatedField<global::ChocolateyGui.Rpc.Package> packages_ = new pbc::RepeatedField<global::ChocolateyGui.Rpc.Package>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChocolateyGui.Rpc.Package> Packages {
      get { return packages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackagesList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackagesList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!packages_.Equals(other.packages_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= packages_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      packages_.WriteTo(output, _repeated_packages_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += packages_.CalculateSize(_repeated_packages_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackagesList other) {
      if (other == null) {
        return;
      }
      packages_.Add(other.packages_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            packages_.AddEntriesFrom(input, _repeated_packages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PackageSearchArgs : pb::IMessage<PackageSearchArgs> {
    private static readonly pb::MessageParser<PackageSearchArgs> _parser = new pb::MessageParser<PackageSearchArgs>(() => new PackageSearchArgs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageSearchArgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageSearchArgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageSearchArgs(PackageSearchArgs other) : this() {
      query_ = other.query_;
      currentPage_ = other.currentPage_;
      pageSize_ = other.pageSize_;
      source_ = other.source_;
      includeAllVersions_ = other.includeAllVersions_;
      includePrerelease_ = other.includePrerelease_;
      matchQuery_ = other.matchQuery_;
      sortColumn_ = other.sortColumn_;
      tagsQuery_ = other.tagsQuery_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageSearchArgs Clone() {
      return new PackageSearchArgs(this);
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentPage" field.</summary>
    public const int CurrentPageFieldNumber = 2;
    private int currentPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPage {
      get { return currentPage_; }
      set {
        currentPage_ = value;
      }
    }

    /// <summary>Field number for the "PageSize" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "Source" field.</summary>
    public const int SourceFieldNumber = 4;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IncludeAllVersions" field.</summary>
    public const int IncludeAllVersionsFieldNumber = 5;
    private bool includeAllVersions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeAllVersions {
      get { return includeAllVersions_; }
      set {
        includeAllVersions_ = value;
      }
    }

    /// <summary>Field number for the "IncludePrerelease" field.</summary>
    public const int IncludePrereleaseFieldNumber = 6;
    private bool includePrerelease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludePrerelease {
      get { return includePrerelease_; }
      set {
        includePrerelease_ = value;
      }
    }

    /// <summary>Field number for the "MatchQuery" field.</summary>
    public const int MatchQueryFieldNumber = 7;
    private bool matchQuery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MatchQuery {
      get { return matchQuery_; }
      set {
        matchQuery_ = value;
      }
    }

    /// <summary>Field number for the "SortColumn" field.</summary>
    public const int SortColumnFieldNumber = 8;
    private string sortColumn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SortColumn {
      get { return sortColumn_; }
      set {
        sortColumn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TagsQuery" field.</summary>
    public const int TagsQueryFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_tagsQuery_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> tagsQuery_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TagsQuery {
      get { return tagsQuery_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageSearchArgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageSearchArgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      if (CurrentPage != other.CurrentPage) return false;
      if (PageSize != other.PageSize) return false;
      if (Source != other.Source) return false;
      if (IncludeAllVersions != other.IncludeAllVersions) return false;
      if (IncludePrerelease != other.IncludePrerelease) return false;
      if (MatchQuery != other.MatchQuery) return false;
      if (SortColumn != other.SortColumn) return false;
      if(!tagsQuery_.Equals(other.tagsQuery_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (CurrentPage != 0) hash ^= CurrentPage.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (IncludeAllVersions != false) hash ^= IncludeAllVersions.GetHashCode();
      if (IncludePrerelease != false) hash ^= IncludePrerelease.GetHashCode();
      if (MatchQuery != false) hash ^= MatchQuery.GetHashCode();
      if (SortColumn.Length != 0) hash ^= SortColumn.GetHashCode();
      hash ^= tagsQuery_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (CurrentPage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentPage);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Source);
      }
      if (IncludeAllVersions != false) {
        output.WriteRawTag(40);
        output.WriteBool(IncludeAllVersions);
      }
      if (IncludePrerelease != false) {
        output.WriteRawTag(48);
        output.WriteBool(IncludePrerelease);
      }
      if (MatchQuery != false) {
        output.WriteRawTag(56);
        output.WriteBool(MatchQuery);
      }
      if (SortColumn.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SortColumn);
      }
      tagsQuery_.WriteTo(output, _repeated_tagsQuery_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (CurrentPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPage);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (IncludeAllVersions != false) {
        size += 1 + 1;
      }
      if (IncludePrerelease != false) {
        size += 1 + 1;
      }
      if (MatchQuery != false) {
        size += 1 + 1;
      }
      if (SortColumn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SortColumn);
      }
      size += tagsQuery_.CalculateSize(_repeated_tagsQuery_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageSearchArgs other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.CurrentPage != 0) {
        CurrentPage = other.CurrentPage;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.IncludeAllVersions != false) {
        IncludeAllVersions = other.IncludeAllVersions;
      }
      if (other.IncludePrerelease != false) {
        IncludePrerelease = other.IncludePrerelease;
      }
      if (other.MatchQuery != false) {
        MatchQuery = other.MatchQuery;
      }
      if (other.SortColumn.Length != 0) {
        SortColumn = other.SortColumn;
      }
      tagsQuery_.Add(other.tagsQuery_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 16: {
            CurrentPage = input.ReadInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            Source = input.ReadString();
            break;
          }
          case 40: {
            IncludeAllVersions = input.ReadBool();
            break;
          }
          case 48: {
            IncludePrerelease = input.ReadBool();
            break;
          }
          case 56: {
            MatchQuery = input.ReadBool();
            break;
          }
          case 66: {
            SortColumn = input.ReadString();
            break;
          }
          case 74: {
            tagsQuery_.AddEntriesFrom(input, _repeated_tagsQuery_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PackageSearchReply : pb::IMessage<PackageSearchReply> {
    private static readonly pb::MessageParser<PackageSearchReply> _parser = new pb::MessageParser<PackageSearchReply>(() => new PackageSearchReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageSearchReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageSearchReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageSearchReply(PackageSearchReply other) : this() {
      packages_ = other.packages_.Clone();
      totalCount_ = other.totalCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageSearchReply Clone() {
      return new PackageSearchReply(this);
    }

    /// <summary>Field number for the "Packages" field.</summary>
    public const int PackagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ChocolateyGui.Rpc.Package> _repeated_packages_codec
        = pb::FieldCodec.ForMessage(10, global::ChocolateyGui.Rpc.Package.Parser);
    private readonly pbc::RepeatedField<global::ChocolateyGui.Rpc.Package> packages_ = new pbc::RepeatedField<global::ChocolateyGui.Rpc.Package>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChocolateyGui.Rpc.Package> Packages {
      get { return packages_; }
    }

    /// <summary>Field number for the "TotalCount" field.</summary>
    public const int TotalCountFieldNumber = 2;
    private int totalCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageSearchReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageSearchReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!packages_.Equals(other.packages_)) return false;
      if (TotalCount != other.TotalCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= packages_.GetHashCode();
      if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      packages_.WriteTo(output, _repeated_packages_codec);
      if (TotalCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += packages_.CalculateSize(_repeated_packages_codec);
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageSearchReply other) {
      if (other == null) {
        return;
      }
      packages_.Add(other.packages_);
      if (other.TotalCount != 0) {
        TotalCount = other.TotalCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            packages_.AddEntriesFrom(input, _repeated_packages_codec);
            break;
          }
          case 16: {
            TotalCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPackageArgs : pb::IMessage<GetPackageArgs> {
    private static readonly pb::MessageParser<GetPackageArgs> _parser = new pb::MessageParser<GetPackageArgs>(() => new GetPackageArgs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPackageArgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageArgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageArgs(GetPackageArgs other) : this() {
      id_ = other.id_;
      version_ = other.version_;
      isPrerelease_ = other.isPrerelease_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPackageArgs Clone() {
      return new GetPackageArgs(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsPrerelease" field.</summary>
    public const int IsPrereleaseFieldNumber = 3;
    private bool isPrerelease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrerelease {
      get { return isPrerelease_; }
      set {
        isPrerelease_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPackageArgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPackageArgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      if (IsPrerelease != other.IsPrerelease) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (IsPrerelease != false) hash ^= IsPrerelease.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (IsPrerelease != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsPrerelease);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (IsPrerelease != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPackageArgs other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.IsPrerelease != false) {
        IsPrerelease = other.IsPrerelease;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 24: {
            IsPrerelease = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PackageOperationResult : pb::IMessage<PackageOperationResult> {
    private static readonly pb::MessageParser<PackageOperationResult> _parser = new pb::MessageParser<PackageOperationResult>(() => new PackageOperationResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageOperationResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageOperationResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageOperationResult(PackageOperationResult other) : this() {
      successful_ = other.successful_;
      messages_ = other.messages_.Clone();
      exceptionMessage_ = other.exceptionMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageOperationResult Clone() {
      return new PackageOperationResult(this);
    }

    /// <summary>Field number for the "Successful" field.</summary>
    public const int SuccessfulFieldNumber = 1;
    private bool successful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Successful {
      get { return successful_; }
      set {
        successful_ = value;
      }
    }

    /// <summary>Field number for the "Messages" field.</summary>
    public const int MessagesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_messages_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> messages_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Messages {
      get { return messages_; }
    }

    /// <summary>Field number for the "ExceptionMessage" field.</summary>
    public const int ExceptionMessageFieldNumber = 3;
    private string exceptionMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExceptionMessage {
      get { return exceptionMessage_; }
      set {
        exceptionMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageOperationResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageOperationResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Successful != other.Successful) return false;
      if(!messages_.Equals(other.messages_)) return false;
      if (ExceptionMessage != other.ExceptionMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Successful != false) hash ^= Successful.GetHashCode();
      hash ^= messages_.GetHashCode();
      if (ExceptionMessage.Length != 0) hash ^= ExceptionMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Successful != false) {
        output.WriteRawTag(8);
        output.WriteBool(Successful);
      }
      messages_.WriteTo(output, _repeated_messages_codec);
      if (ExceptionMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExceptionMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Successful != false) {
        size += 1 + 1;
      }
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (ExceptionMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExceptionMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageOperationResult other) {
      if (other == null) {
        return;
      }
      if (other.Successful != false) {
        Successful = other.Successful;
      }
      messages_.Add(other.messages_);
      if (other.ExceptionMessage.Length != 0) {
        ExceptionMessage = other.ExceptionMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Successful = input.ReadBool();
            break;
          }
          case 18: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
          case 26: {
            ExceptionMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InstallPackageArgs : pb::IMessage<InstallPackageArgs> {
    private static readonly pb::MessageParser<InstallPackageArgs> _parser = new pb::MessageParser<InstallPackageArgs>(() => new InstallPackageArgs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstallPackageArgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstallPackageArgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstallPackageArgs(InstallPackageArgs other) : this() {
      id_ = other.id_;
      version_ = other.version_;
      source_ = other.source_;
      force_ = other.force_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstallPackageArgs Clone() {
      return new InstallPackageArgs(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Source" field.</summary>
    public const int SourceFieldNumber = 3;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Force" field.</summary>
    public const int ForceFieldNumber = 4;
    private bool force_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstallPackageArgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstallPackageArgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      if (Source != other.Source) return false;
      if (Force != other.Force) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (Force != false) {
        output.WriteRawTag(32);
        output.WriteBool(Force);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstallPackageArgs other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Force != false) {
        Force = other.Force;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 32: {
            Force = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UninstallPackageArgs : pb::IMessage<UninstallPackageArgs> {
    private static readonly pb::MessageParser<UninstallPackageArgs> _parser = new pb::MessageParser<UninstallPackageArgs>(() => new UninstallPackageArgs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UninstallPackageArgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UninstallPackageArgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UninstallPackageArgs(UninstallPackageArgs other) : this() {
      id_ = other.id_;
      version_ = other.version_;
      force_ = other.force_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UninstallPackageArgs Clone() {
      return new UninstallPackageArgs(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Force" field.</summary>
    public const int ForceFieldNumber = 3;
    private bool force_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UninstallPackageArgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UninstallPackageArgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      if (Force != other.Force) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (Force != false) {
        output.WriteRawTag(24);
        output.WriteBool(Force);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UninstallPackageArgs other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Force != false) {
        Force = other.Force;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 24: {
            Force = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatePackageArgs : pb::IMessage<UpdatePackageArgs> {
    private static readonly pb::MessageParser<UpdatePackageArgs> _parser = new pb::MessageParser<UpdatePackageArgs>(() => new UpdatePackageArgs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePackageArgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePackageArgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePackageArgs(UpdatePackageArgs other) : this() {
      id_ = other.id_;
      source_ = other.source_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePackageArgs Clone() {
      return new UpdatePackageArgs(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Source" field.</summary>
    public const int SourceFieldNumber = 2;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePackageArgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePackageArgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Source != other.Source) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePackageArgs other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PinPackageArgs : pb::IMessage<PinPackageArgs> {
    private static readonly pb::MessageParser<PinPackageArgs> _parser = new pb::MessageParser<PinPackageArgs>(() => new PinPackageArgs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PinPackageArgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PinPackageArgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PinPackageArgs(PinPackageArgs other) : this() {
      id_ = other.id_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PinPackageArgs Clone() {
      return new PinPackageArgs(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PinPackageArgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PinPackageArgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PinPackageArgs other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateSourceArgs : pb::IMessage<UpdateSourceArgs> {
    private static readonly pb::MessageParser<UpdateSourceArgs> _parser = new pb::MessageParser<UpdateSourceArgs>(() => new UpdateSourceArgs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateSourceArgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSourceArgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSourceArgs(UpdateSourceArgs other) : this() {
      id_ = other.id_;
      Source = other.source_ != null ? other.Source.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSourceArgs Clone() {
      return new UpdateSourceArgs(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::ChocolateyGui.Rpc.ChocolateySource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChocolateyGui.Rpc.ChocolateySource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateSourceArgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateSourceArgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Source, other.Source)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateSourceArgs other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::ChocolateyGui.Rpc.ChocolateySource();
        }
        Source.MergeFrom(other.Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::ChocolateyGui.Rpc.ChocolateySource();
            }
            input.ReadMessage(source_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveSourceArgs : pb::IMessage<RemoveSourceArgs> {
    private static readonly pb::MessageParser<RemoveSourceArgs> _parser = new pb::MessageParser<RemoveSourceArgs>(() => new RemoveSourceArgs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveSourceArgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChocolateyGui.Rpc.PackageServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSourceArgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSourceArgs(RemoveSourceArgs other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSourceArgs Clone() {
      return new RemoveSourceArgs(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveSourceArgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveSourceArgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveSourceArgs other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
